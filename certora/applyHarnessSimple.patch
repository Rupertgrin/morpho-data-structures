diff -ruN DoubleLinkedList.sol DoubleLinkedList.sol
--- DoubleLinkedList.sol	2024-07-10 12:25:51.055549876 +0200
+++ DoubleLinkedList.sol	2024-07-11 13:19:00.201544572 +0200
@@ -16,6 +16,8 @@
 
     struct List {
         mapping(address => Account) accounts;
+        address insertedBefore; // HARNESS: address of the account before which the account was inserted at last insertion.
+        address insertedAfter; // HARNESS: address of the account after which the account was inserted at last insertion.
     }
 
     /* ERRORS */
@@ -90,23 +92,19 @@
     /// @param list The list to search in.
     /// @param id The address of the account.
     /// @param value The value of the account.
-    /// @param maxIterations The max number of iterations.
-    function insertSorted(List storage list, address id, uint256 value, uint256 maxIterations) internal {
+    function insertSorted(List storage list, address id, uint256 value) internal {
         if (value == 0) revert ValueIsZero();
         if (id == address(0)) revert AddressIsZero();
         if (list.accounts[id].value != 0) revert AccountAlreadyInserted();
 
-        uint256 numberOfIterations;
-        address next = list.accounts[address(0)].next; // If not added at the end of the list `id` will be inserted before `next`.
+        address next = list.accounts[address(0)].next; // `id` will be inserted before `next`.
 
-        while (numberOfIterations < maxIterations && next != address(0) && list.accounts[next].value >= value) {
+        while (next != address(0) && list.accounts[next].value >= value) {
+            list.insertedAfter = next; // HARNESS
             next = list.accounts[next].next;
-            unchecked {
-                ++numberOfIterations;
-            }
         }
 
-        if (numberOfIterations == maxIterations) next = address(0);
+        list.insertedBefore = next; // HARNESS
 
         address prev = list.accounts[next].prev;
         list.accounts[id] = Account(prev, next, value);
